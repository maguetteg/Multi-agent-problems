import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import random




def place_robots(num_robots, specified_positions=None, grid_size=(20, 20)):

    grid = np.full(grid_size, None, dtype=object)

    
    # Command center at (0,0)
    grid[0, 0] = -1   #Command center is identified as -1 on the numeric grid

    
    # Unless initial positions are specified for the robots, they will be randomly generated 
    if specified_positions is not None and len(specified_positions) == num_robots:
        robot_positions = specified_positions
    else:
        # List of all unique positions on the grid
        all_positions = np.array(np.meshgrid(range(1, grid_size[0]), range(1, grid_size[1]))).T.reshape(-1, 2)

        # Random selection of the robots initial positions
        robot_positions = all_positions[np.random.choice(len(all_positions), size=num_robots, replace=False)]


    robot_names = np.arange(1, num_robots + 1)
    
    for position, name in zip(robot_positions, robot_names):
        grid[position[0], position[1]] = name

        
        
    # Generate random position for the target
    while True:
        red_cross_position = np.random.choice(range(1, grid_size[0]), size=2)
        if grid[red_cross_position[0], red_cross_position[1]] is None:
            break

    grid_numeric = np.zeros_like(grid, dtype=int)
    grid_numeric[grid == -1] = -1  

    for i in range(1, num_robots + 1):
        grid_numeric[grid == i] = i

    
    grid_numeric[red_cross_position[0], red_cross_position[1]] = -2

    return grid_numeric, red_cross_position, grid_size




specified_positions = []
num_robots = 5

    
grid_result, red_cross_position, grid_size = place_robots(num_robots, specified_positions, grid_size=(20, 20))


# Display initial condiguration 
fig, ax = plt.subplots(figsize=(10, 10))
cax = ax.imshow(grid_result, cmap='Accent', origin='lower', extent=[0, grid_size[0], 0, grid_size[1]])


# Add grid lines for better visualization (optional)
plt.grid(True, which='both', color='black', linewidth=1)


# Set axis ticks and labels in the center of squares
plt.xticks(np.arange(0.5, grid_size[0] + 0.5, 1), np.arange(0, grid_size[0], 1))
plt.yticks(np.arange(0.5, grid_size[1] + 0.5, 1), np.arange(0, grid_size[1], 1))



# Display the red cross on the plot
plt.text(red_cross_position[1] + 0.5, red_cross_position[0] + 0.5, 'X', fontsize=30, color='r', ha='center', va='center')

# Show the plot in a pop-up window
plt.show(block=True)
print("\n") 


# Robots initial positions

pos_init = []
for robot in range(1, num_robots + 1):
    pos_init.append(np.argwhere(grid_result == robot)[0])

current_positions = [pos_init[robot][::-1] for robot in range(num_robots)]
print("Robots Initial positions : ", current_positions)
print("\n")  


# Target position
print("Target position : {},{}".format(red_cross_position[1], red_cross_position[0]))
